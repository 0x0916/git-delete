#!/bin/sh

#############
# Variables #
#############
PROJECT_HOME=`git rev-parse --show-toplevel`
NUMBER_OF_FILES=5

FILES_TO_REMOVE=$( mktemp )
trap "rm $FILES_TO_REMOVE" EXIT

#######################
# Auxiliary functions #
#######################
function get_biggest_files_hash() {
	hashes=( `git verify-pack -v $PROJECT_HOME/.git/objects/pack/*.idx | sort -k 3 -n | tail -$1 | awk '{print $1}'` )
}

function get_biggest_files_size() {
	sizes=( `git verify-pack -v $PROJECT_HOME/.git/objects/pack/*.idx | sort -k 3 -n | tail -$1 | awk '{print $3}'` )
}

function get_file_name() {
	local file_name=`git rev-list --objects --all | grep $1 | awk '{print $2}'`
	echo "$file_name" 
}

function get_biggest_files_name() {
	files=()
	for hash in ${hashes[@]}; do
		files+=( `get_file_name $hash` )
	done
}

function show_menu() {
	local options=()
	for ((i=0; i<$NUMBER_OF_FILES; i++)); do
		options+=("$i" "${files[$i]}" "ON")
	done
	whiptail --title 'git delete' --checklist "Select files to be removed" $(($NUMBER_OF_FILES + 12)) 60 $(($NUMBER_OF_FILES + 4)) \
		"${options[@]}" \
		2> $FILES_TO_REMOVE 

}

########
# main #
########
git gc --quiet
get_biggest_files_hash $NUMBER_OF_FILES
get_biggest_files_size $NUMBER_OF_FILES
get_biggest_files_name
show_menu

for ((i=0; i<$NUMBER_OF_FILES; i++)); do
	echo ${files[$i]} ${sizes[$i]}
done
